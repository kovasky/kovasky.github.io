[{"content":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eThis is just a post to describe my homelab setup and make it linkable where needed (like in my resume). This is most definitely subject to change at any time as I continue to play with new technologies and keep adding things!\u003c/p\u003e\n\u003cp\u003eCheck out my uptime \u003ca href=\"https://agrajag.cloud\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"hosts\"\u003eHosts\u003c/h2\u003e\n\u003cp\u003eMy homelab consists of a 2 node proxmox cluster + 1 quorum device. The hosts are a 2010 Mac Pro as well as a M910X Thinkcentre Tiny and the qdevice is a nanopi neo.\u003c/p\u003e\n\u003cp\u003eThe specs are:\u003c/p\u003e\n\u003ch5 id=\"mac-pro\"\u003eMac Pro\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e2x Xeon x5690\u003c/li\u003e\n\u003cli\u003e6x 16GB DDR3 RAM\u003c/li\u003e\n\u003cli\u003e2x 1TB MX500 SSD\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"m910x\"\u003eM910X\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e1x Core i7-7700\u003c/li\u003e\n\u003cli\u003e2x 16GB DDR4 RAM\u003c/li\u003e\n\u003cli\u003e1x 1TB P5 SSD\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor storage I have a TerraMaster F2-220 running DSM through tinycore with 2x 6TB Ironwolf HDDs.\u003c/p\u003e\n\u003ch2 id=\"use-cases\"\u003eUse Cases\u003c/h2\u003e\n\u003cp\u003eMy homelab is mainly to have fun! I enjoy tinkering and learning new technologies so I put most of my free time in this :)\u003c/p\u003e\n\u003cp\u003eSome cool stuff im doing is the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePfSense directly hooked to my ISPs modem with BIND and Suricata to have control over my local network.\u003c/li\u003e\n\u003cli\u003eHomebridge to have remote access to my custom IP camera built using an ESP32.\u003c/li\u003e\n\u003cli\u003ePlex for viewing my media on the go.\u003c/li\u003e\n\u003cli\u003eWireGuard for outside access to my servers.\u003c/li\u003e\n\u003cli\u003eNginx + Authelia + Fail2Ban to expose services over the web as well as automatically ban unauthorized access attempts at a Cloudflare level.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-am-i-running\"\u003eWhat am I running?\u003c/h2\u003e\n\u003cp\u003eVMS:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePfSense\u003c/li\u003e\n\u003cli\u003eNTP Server\u003c/li\u003e\n\u003cli\u003eFreeIPA\u003c/li\u003e\n\u003cli\u003eAnsible\u003c/li\u003e\n\u003cli\u003eDocker\u003c/li\u003e\n\u003cli\u003eHomeBridge\u003c/li\u003e\n\u003cli\u003ePlex\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eContainers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAuthelia\u003c/li\u003e\n\u003cli\u003eDashy\u003c/li\u003e\n\u003cli\u003eFail2ban\u003c/li\u003e\n\u003cli\u003eGuacamole\u003c/li\u003e\n\u003cli\u003eKanboard\u003c/li\u003e\n\u003cli\u003eMariadb\u003c/li\u003e\n\u003cli\u003eMatomo\u003c/li\u003e\n\u003cli\u003eNginx Proxy Manager\u003c/li\u003e\n\u003cli\u003eOpenSpeedTest\u003c/li\u003e\n\u003cli\u003eOverseerr\u003c/li\u003e\n\u003cli\u003ePortioner\u003c/li\u003e\n\u003cli\u003eProwlarr\u003c/li\u003e\n\u003cli\u003eRadarr\u003c/li\u003e\n\u003cli\u003eRedis\u003c/li\u003e\n\u003cli\u003eSonarr\u003c/li\u003e\n\u003cli\u003eTransmission\u003c/li\u003e\n\u003cli\u003eUptime Kuma\u003c/li\u003e\n\u003cli\u003eWatchtower\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"diagram\"\u003eDiagram\u003c/h2\u003e\n\u003cp\u003eI will post a diagram here :)\u003c/p\u003e\n\u003ch2 id=\"full-pic\"\u003eFull pic\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/images/blogs/homelab.jpeg\" alt=\"\"\u003e\u003c/p\u003e\n","description":"My homelab!","image":"/images/blogs/homelab_thumb.png","permalink":"https://kovasky.me/blogs/homelab/","title":"Homelab"},{"content":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eAfter tirelessly looking for a solution in order to dynamically create a whitelist for Suricata based on DNS, I decided to create my own.\u003c/p\u003e\n\u003ch2 id=\"download-the-necessary-files\"\u003eDownload the necessary files\u003c/h2\u003e\n\u003cp\u003eCreate a whitelist file with all the domains you wish whitelisted. A useful starting point is \u003ca href=\"https://github.com/anudeepND/whitelist\"\u003eanudeepND\u0026rsquo;s collection of commonly white listed domains\u003c/a\u003e. After that, download my \u003ca href=\"https://github.com/kovasky/homelabscripts/blob/main/pfSense/suricata/generateRules.py\"\u003egenerateRules.py\u003c/a\u003e script.\u003c/p\u003e\n\u003cp\u003ePlace these files in a directory of your choice on your PfSense host. For simplicity, I just placed them in /root. Finally, make the script executable by \u003ccode\u003echmod +x ./generateRules.py\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"modifying-suricatainc\"\u003eModifying suricata.inc\u003c/h2\u003e\n\u003cp\u003eNavigate to \u003ccode\u003e/usr/local/pkg/suricata/\u003c/code\u003e and using a text editor open \u003ccode\u003esuricata_defs.inc\u003c/code\u003e. Make the following modifications:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003edefined\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SURICATA_DEFAULT_RULES\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003edefine\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SURICATA_DEFAULT_RULES\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003earray\u003c/span\u003e( \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;whitelist.rules\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;app-layer-events.rules\u0026#34;\u003c/span\u003e, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;decoder-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dhcp-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dnp3-events.rules\u0026#34;\u003c/span\u003e, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dns-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;files.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http-events.rules\u0026#34;\u003c/span\u003e, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http2-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ipsec-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kerberos-events.rules\u0026#34;\u003c/span\u003e, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;modbus-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mqtt-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nfs-events.rules\u0026#34;\u003c/span\u003e, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ntp-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;smb-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;smtp-events.rules\u0026#34;\u003c/span\u003e, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ssh-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;stream-events.rules\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tls-events.rules\u0026#34;\u003c/span\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe first element in the array will be our generated \u003ccode\u003ewhitelist.rules\u003c/code\u003e. This file can be named as you wish and it will appear as so in the web gui.\u003c/p\u003e\n\u003ch2 id=\"running-the-script\"\u003eRunning the script\u003c/h2\u003e\n\u003cp\u003eRun the script with the path to the dns whitelist as well as where you want the output file. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./generateRules.py /root/dns_list.txt /root/whitelist.rules\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce the script has finished, you can copy/move it to \u003ccode\u003e/usr/local/share/suricata/rules/\u003c/code\u003e. If you open the Suricata web gui and select your interface, the new ruleset should appear. If not, you can try running \u003ccode\u003esuricata-update\u003c/code\u003e in terminal.\u003c/p\u003e\n\u003ch2 id=\"automating-the-generation-of-rules\"\u003eAutomating the generation of rules\u003c/h2\u003e\n\u003cp\u003eSince the IPs can change for any given domain, an easy way to update them would be to set up a cron job. Mine looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e * * * /root/update_rules.py /root/dns_list.txt /root/whitelist.rules\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e35\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e * * * mv /root/whitelist.rules /usr/local/share/suricata/rules/whitelist.rules \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e suricata-update\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"done\"\u003eDone!\u003c/h2\u003e\n\u003cp\u003eAfter these steps are done, you are good to go and your domains will be whitelisted.\u003c/p\u003e\n","description":"Add a dns whitelist for Suricata in PfSense.","image":"/images/blogs/suricata.png","permalink":"https://kovasky.me/blogs/whitelist/","title":"Whitelisting in Suricata Package for PfSense"},{"content":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eWhile setting up my hosts with FreeIPA, I noticed that home directories were not being created when logging in through ssh. Looking online it seems that most people just use NFS shares to keep home directories the same across devices but I did not want to set up NFS home shares. Fixing this in RHEL-based distros is easy with authconfig but debian-based distros do not come with this. To fix this in debian-based distros is as easy as modiyfing the pam.d config file.\u003c/p\u003e\n\u003ch2 id=\"modify-sshd-and-reload-pam\"\u003eModify sshd and reload pam\u003c/h2\u003e\n\u003cp\u003eOpen /etc/pam.d/sshd with your favourite text editor and add the following line:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esession required pam_mkhomedir.so skel\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/etc/skel/ umask\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0022\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter this, no reload should be necessary but just in case we execute the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo pam-auth-update --force --package\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"done\"\u003eDone!\u003c/h2\u003e\n\u003cp\u003eAfter following these steps, our host should automatically create a home directory when logging in through ssh using FreeIPA credentials.\u003c/p\u003e\n","description":"Auto create a local home directory in FreeIPA enrolled hosts.","image":"/images/blogs/freeipa_home.png","permalink":"https://kovasky.me/blogs/homecreation/","title":"Automatically create local home directory when logging in with FreeIPA"},{"content":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eI wanted to easily synchronize the time between my VMs and decided to set up an ntp server to accomplish this. Since a USB GPS device is relatively inexpensive, I thought it would be a great addition to the project.\u003c/p\u003e\n\u003cp\u003eFor the following examples, I used aptitude and vim.\u003c/p\u003e\n\u003ch2 id=\"prerequisite-packages\"\u003ePrerequisite Packages\u003c/h2\u003e\n\u003cp\u003eRun the following command to ensure we have the necessary packages:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt-get update \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt-get install gpsd gpsd-clients chrony\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"check-dev-for-gps\"\u003eCheck /dev for GPS\u003c/h2\u003e\n\u003cp\u003eOnce the gps is connected to the pc, we need to figure out the assigned device. This can be any of /dev/ttyUSB0, /dev/ttyACM0 or /dev/ttyAMA0.\u003c/p\u003e\n\u003cp\u003eIf unsure of which device it is, we can always run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat /dev/$device\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe should be able to see a stream with coordinates and strings like \u0026ldquo;GPGGA\u0026rdquo; and \u0026ldquo;GPGSA\u0026rdquo;.\u003c/p\u003e\n\u003ch2 id=\"modify-gpsdconf-and-start-the-service\"\u003eModify gpsd.conf and start the service\u003c/h2\u003e\n\u003cp\u003eAfter getting the correct device, we will need to modify the configuration file located at \u0026ldquo;/etc/default/gpsd\u0026rdquo;. It should contain the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSTART_DAEMON\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUSBAUTO\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDEVICES\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/dev/ttyACM0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGPSD_OPTIONS\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-n\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter this we should enable and start the service:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo systemctl enable gpsd \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo systemctl start gpsd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"modify-chronyconf-and-start-the-service\"\u003eModify chrony.conf and start the service\u003c/h2\u003e\n\u003cp\u003eThe configuration file will either be in \u0026ldquo;/etc/chrony.conf\u0026rdquo; or \u0026ldquo;/etc/chrony/chrony.conf\u0026rdquo;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edriftfile /var/lib/chrony/chrony/drift\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eallow\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erefclock SHM \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e refid GPS precision 1e-1 offset 0.9999 delay 0.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erefclock SHM \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e refid PPS precision 1e-7\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter this we should enable and start the service:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo systemctl enable chronyd \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo systemctl start chronyd\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"checking-chrony-status\"\u003eChecking chrony status\u003c/h2\u003e\n\u003cp\u003eTheres a few things we can check to see if everything was set up correctly. To see if chrony takes in the gps data, we can run the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echronyc sources\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd to see if it is working as intended, we can run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echronyc tracking\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe output should look similar to the image at the top of this post.\u003c/p\u003e\n\u003ch2 id=\"done\"\u003eDone!\u003c/h2\u003e\n\u003cp\u003eAfter following these steps, we should have a working ntp server and all that is left is to point any client to the ip of the host running chrony.\u003c/p\u003e\n","description":"Set up an NTP server to keep hosts synchronized.","image":"/images/blogs/chrony.png","permalink":"https://kovasky.me/blogs/chronyd/","title":"NTP server with GPS and chrony"}]