<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Active Directory on Kovasky Buezo | Software Developer, Cybersecurity Enthusiast</title><link>https://kovasky.me/tags/active-directory/</link><description>Recent content in Active Directory on Kovasky Buezo | Software Developer, Cybersecurity Enthusiast</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 03 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://kovasky.me/tags/active-directory/index.xml" rel="self" type="application/rss+xml"/><item><title>Set up centralized SSH key storage for external Active Directory users in FreeIPA (including FIDO2 hardware keys)</title><link>https://kovasky.me/blogs/ad_trust_ssh/</link><pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/ad_trust_ssh/</guid><description>Intro I was tired of entering my password every time I SSH&amp;rsquo;d to my VMs, but setting up SSH keys would mean manually copying my public key to each host I wanted to connect to. I then read about one key feature of FreeIPA, which is serving as a centralized key repository.
This posed another problem: I donâ€™t have any users in FreeIPA, as I mainly use my AD credentials (FreeIPA is one way only, and many services interact directly with Active Directory).</description></item><item><title>Replace the default shell for domain users on Linux</title><link>https://kovasky.me/blogs/login_shell/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/login_shell/</guid><description>Intro After setting up the AD trust, every time I logged in the shell defaulted to /bin/sh. To change it to /bin/bash or any other shell of your choice you can do the following.
Editing SSSD.conf Navigate to /etc/sssd/ and open sssd.conf in an elevated text editor. It should look something like
[domain/lin.mydomain.com] ... use_fully_qualified_names = false [domain/lin.mydomain.com/win.mydomain.com] use_fully_qualified_names = false [sssd] ... After each domain, add your override shell. Something like:</description></item><item><title>Map an Active Directory group to sudo in Linux</title><link>https://kovasky.me/blogs/mapping_sudo/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/mapping_sudo/</guid><description>Intro After creating my domain trust between AD and FreeIPA, I was left wanting to access restricted resources in Linux using my AD accounts. To circumvent this, I mapped a group from AD to FreeIPA and gave it the appropriate permissions.
Create the group in AD The first step would be to create a group in AD to which sudo will be mapped. In my case, I created a group named &amp;lsquo;sudo&amp;rsquo; to match the Linux counterpart.</description></item><item><title>Log in to Linux using AD credentials without specifying the domain</title><link>https://kovasky.me/blogs/no_domain_login/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/no_domain_login/</guid><description>Intro After creating a trust in FreeIPA, I kept having to write the full domain alongside my username whenever I tried to access the system. These are the steps I took to log in only with my username.
Editing SSSD.conf Navigate to /etc/sssd/ and open sssd.conf in an elevated text editor. It should look something like
[domain/lin.mydomain.com] ... [sssd] services = nss, pam, ssh, sudo domains = lin.mydomain.com Before [sssd], add your trusted domain.</description></item><item><title>Setting up a cross-domain trust between FreeIPA and AD</title><link>https://kovasky.me/blogs/ad_trust/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/ad_trust/</guid><description>Intro I&amp;rsquo;ve been playing around with FreeIPA in my homelab for a while and have always wanted to enable seamless authentication between all my hosts regardless of their operating system. I stumbled upon the concept of cross-domain trusts between FreeIPA and Active Directory which allows us to achieve this.
There is a caveat though, and that is that two-way trusts are still not fully implemented in FreeIPA, which means Windows users can authenticate against Linux hosts but Linux users can&amp;rsquo;t do the same the other way around.</description></item></channel></rss>