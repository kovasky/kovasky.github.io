<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Active Directory on Kovasky Buezo | Software Developer, Cybersecurity Enthusiast</title><link>https://kovasky.me/tags/active-directory/</link><description>Recent content in Active Directory on Kovasky Buezo | Software Developer, Cybersecurity Enthusiast</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 11 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://kovasky.me/tags/active-directory/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Authelia as a social login provider for ERPNext</title><link>https://kovasky.me/blogs/erpnext_authelia/</link><pubDate>Sun, 11 May 2025 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/erpnext_authelia/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>At the time of writing this post, I found no guide on setting up Authelia as a social provider for ERPNext. These are the steps I took to link them.&lt;/p>
&lt;h2 id="authelia">Authelia&lt;/h2>
&lt;p>If you have an LDAP server configured, you have to make sure the correct attributes are retrieved. The attributes section should look like follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">authentication_backend&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ldap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">implementation&lt;/span>: &lt;span style="color:#ae81ff">custom&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">address&lt;/span>: &lt;span style="color:#ae81ff">ldap://&amp;lt;server ip address&amp;gt;:389&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">start_tls&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tls&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">skip_verify&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">minimum_version&lt;/span>: &lt;span style="color:#ae81ff">TLS1.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">base_dn&lt;/span>: &lt;span style="color:#ae81ff">DC=mydomain,DC=com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">attributes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">sAMAccountName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group_name&lt;/span>: &lt;span style="color:#ae81ff">cn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mail&lt;/span>: &lt;span style="color:#ae81ff">mail&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">display_name&lt;/span>: &lt;span style="color:#ae81ff">displayname&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">given_name&lt;/span>: &lt;span style="color:#ae81ff">givenName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">family_name&lt;/span>: &lt;span style="color:#ae81ff">sn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">users_filter&lt;/span>: &lt;span style="color:#ae81ff">(&amp;amp;(|({username_attribute}={input})({mail_attribute}={input}))(objectCategory=person)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2)(!pwdLastSet=0))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">groups_filter&lt;/span>: &lt;span style="color:#ae81ff">(&amp;amp;(member:1.2.840.113556.1.4.1941:={dn})(objectClass=group)(objectCategory=group))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user&lt;/span>: &lt;span style="color:#ae81ff">CN=&amp;lt;bind account username&amp;gt;,CN=Users,DC=mydomain,DC=com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;bind account password&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Once the ldap section is correct, you should proceed to the identity providers section to configure the ERPNext client. The client configuration for erpnext should look as follows:&lt;/p></description></item><item><title>Set up centralized SSH key storage for external Active Directory users in FreeIPA (including FIDO2 hardware keys)</title><link>https://kovasky.me/blogs/ad_trust_ssh/</link><pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/ad_trust_ssh/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I was tired of entering my password every time I SSH&amp;rsquo;d to my VMs, but setting up SSH keys would mean manually copying my public key to each host I wanted to connect to. I then read about one key feature of FreeIPA, which is serving as a centralized key repository.&lt;/p>
&lt;p>This posed another problem: I don’t have any users in FreeIPA, as I mainly use my AD credentials (FreeIPA is one way only, and many services interact directly with Active Directory). Here’s how I generated and stored my AD user’s public key in FreeIPA, which allows me to remote into any enrolled device without manually distributing the keys.&lt;/p></description></item><item><title>Replace the default shell for domain users on Linux</title><link>https://kovasky.me/blogs/login_shell/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/login_shell/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>After setting up the AD trust, every time I logged in the shell defaulted to /bin/sh. To change it to /bin/bash or any other shell of your choice you can do the following.&lt;/p>
&lt;h2 id="editing-sssdconf">Editing SSSD.conf&lt;/h2>
&lt;p>Navigate to /etc/sssd/ and open sssd.conf in an elevated text editor. It should look something like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>domain/lin.mydomain.com&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>use_fully_qualified_names &lt;span style="color:#f92672">=&lt;/span> false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>domain/lin.mydomain.com/win.mydomain.com&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>use_fully_qualified_names &lt;span style="color:#f92672">=&lt;/span> false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>sssd&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>After each domain, add your override shell. Something like:&lt;/p></description></item><item><title>Map an Active Directory group to sudo in Linux</title><link>https://kovasky.me/blogs/mapping_sudo/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/mapping_sudo/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>After creating my domain trust between AD and FreeIPA, I was left wanting to access restricted resources in Linux using my AD accounts. To circumvent this, I mapped a group from AD to FreeIPA and gave it the appropriate permissions.&lt;/p>
&lt;h2 id="create-the-group-in-ad">Create the group in AD&lt;/h2>
&lt;p>The first step would be to create a group in AD to which sudo will be mapped. In my case, I created a group named &amp;lsquo;sudo&amp;rsquo; to match the Linux counterpart. To do this, navigate to Server Manager -&amp;gt; Active Directory Users and Computers -&amp;gt; Users. Then, right-click and go to New -&amp;gt; Group. In the name, type &amp;lsquo;sudo&amp;rsquo;. After the item is created, it should look like:&lt;/p></description></item><item><title>Log in to Linux using AD credentials without specifying the domain</title><link>https://kovasky.me/blogs/no_domain_login/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/no_domain_login/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>After creating a trust in FreeIPA, I kept having to write the full domain alongside my username whenever I tried to access the system. These are the steps I took to log in only with my username.&lt;/p>
&lt;h2 id="editing-sssdconf">Editing SSSD.conf&lt;/h2>
&lt;p>Navigate to /etc/sssd/ and open sssd.conf in an elevated text editor. It should look something like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>domain/lin.mydomain.com&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>sssd&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services &lt;span style="color:#f92672">=&lt;/span> nss, pam, ssh, sudo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>domains &lt;span style="color:#f92672">=&lt;/span> lin.mydomain.com&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Before [sssd], add your trusted domain. Something like:&lt;/p></description></item><item><title>Setting up a cross-domain trust between FreeIPA and AD</title><link>https://kovasky.me/blogs/ad_trust/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/ad_trust/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I&amp;rsquo;ve been playing around with FreeIPA in my homelab for a while and have always wanted to enable seamless authentication between all my hosts regardless of their operating system. I stumbled upon the concept of cross-domain trusts between FreeIPA and Active Directory which allows us to achieve this.&lt;/p>
&lt;p>There is a caveat though, and that is that two-way trusts are still not fully implemented in FreeIPA, which means Windows users can authenticate against Linux hosts but Linux users can&amp;rsquo;t do the same the other way around.&lt;/p></description></item></channel></rss>