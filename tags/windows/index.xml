<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Windows on Kovasky Buezo | Software Developer, Cybersecurity Enthusiast</title><link>https://kovasky.me/tags/windows/</link><description>Recent content in Windows on Kovasky Buezo | Software Developer, Cybersecurity Enthusiast</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 08 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://kovasky.me/tags/windows/index.xml" rel="self" type="application/rss+xml"/><item><title>Send push notifications to your mobile phone with ntfy.sh via PowerShell</title><link>https://kovasky.me/blogs/powershell_ntfy/</link><pubDate>Tue, 08 Jul 2025 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/powershell_ntfy/</guid><description>&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;I had a few PowerShell tasks set up in my server with no way of knowing their status unless I checked for logs. Logging in and searching for logs easily becomes a hassle when you have more than one VM. I needed a less time consuming method, so I found a way to send push alerts to my mobile phone using ntfy.&lt;/p&gt;
&lt;h2 id="pre-requisites"&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;For this setup to work, you should have a running instance of ntfy.sh. You can find the installation instructions &lt;a href="https://docs.ntfy.sh/install/"&gt;here&lt;/a&gt;. You can find my personal docker compose file &lt;a href="https://kovasky.me/blogs/proxmox_ntfy/"&gt;here&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Enabling SR-IOV for an Intel X540-T2 on Proxmox 8</title><link>https://kovasky.me/blogs/sr_iov/</link><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/sr_iov/</guid><description>&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;In the quest to get more performance out of my inter-vm communication, I stumbled upon SR-IOV and virtual functions. I then purchased a 10gbe X540-T2 from a Chinese seller on eBay making sure to get one with a fan, as reports of this specific card say it runs quite hot. After setting everything up, I increased my network performance from 2.5gbps on a vSwitch to 14gbps with virtual function passthrough.&lt;/p&gt;</description></item><item><title>Map an Active Directory group to sudo in Linux</title><link>https://kovasky.me/blogs/mapping_sudo/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/mapping_sudo/</guid><description>&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;After creating my domain trust between AD and FreeIPA, I was left wanting to access restricted resources in Linux using my AD accounts. To circumvent this, I mapped a group from AD to FreeIPA and gave it the appropriate permissions.&lt;/p&gt;
&lt;h2 id="create-the-group-in-ad"&gt;Create the group in AD&lt;/h2&gt;
&lt;p&gt;The first step would be to create a group in AD to which sudo will be mapped. In my case, I created a group named &amp;lsquo;sudo&amp;rsquo; to match the Linux counterpart. To do this, navigate to Server Manager -&amp;gt; Active Directory Users and Computers -&amp;gt; Users. Then, right-click and go to New -&amp;gt; Group. In the name, type &amp;lsquo;sudo&amp;rsquo;. After the item is created, it should look like:&lt;/p&gt;</description></item><item><title>Log in to Linux using AD credentials without specifying the domain</title><link>https://kovasky.me/blogs/no_domain_login/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/no_domain_login/</guid><description>&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;After creating a trust in FreeIPA, I kept having to write the full domain alongside my username whenever I tried to access the system. These are the steps I took to log in only with my username.&lt;/p&gt;
&lt;h2 id="editing-sssdconf"&gt;Editing SSSD.conf&lt;/h2&gt;
&lt;p&gt;Navigate to /etc/sssd/ and open sssd.conf in an elevated text editor. It should look something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;domain/lin.mydomain.com&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;sssd&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;services &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nss, pam, ssh, sudo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;domains &lt;span style="color:#f92672"&gt;=&lt;/span&gt; lin.mydomain.com&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before [sssd], add your trusted domain. Something like:&lt;/p&gt;</description></item><item><title>Setting up a cross-domain trust between FreeIPA and AD</title><link>https://kovasky.me/blogs/ad_trust/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://kovasky.me/blogs/ad_trust/</guid><description>&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been playing around with FreeIPA in my homelab for a while and have always wanted to enable seamless authentication between all my hosts regardless of their operating system. I stumbled upon the concept of cross-domain trusts between FreeIPA and Active Directory which allows us to achieve this.&lt;/p&gt;
&lt;p&gt;There is a caveat though, and that is that two-way trusts are still not fully implemented in FreeIPA, which means Windows users can authenticate against Linux hosts but Linux users can&amp;rsquo;t do the same the other way around.&lt;/p&gt;</description></item></channel></rss>